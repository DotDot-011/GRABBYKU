{"ast":null,"code":"var _jsxFileName = \"F:\\\\tryReact\\\\googlemap\\\\src\\\\App.js\";\nimport React from \"react\";\nimport './App.css';\nimport { InfoWindow, withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport { throwStatement } from \"@babel/types\";\nimport { Descriptions } from 'antd';\nimport AutoComplete from 'react-google-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(\"AIzaSyDrjHmzaE-oExXPRlnkij2Ko3svtUwy9p4\");\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      zoom: 15,\n      height: 400,\n      mapPosition: {\n        lat: 0,\n        lng: 0\n      },\n      markerPosition: {\n        lat: 13.84839475068859,\n        lng: 100.56908802639256\n      }\n    };\n\n    this.findMylocation = () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          mapPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n          markerPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        }, () => {\n          Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(response => {\n            const address = response.results[0].formatted_address,\n                  addressArray = response.results[0].address_components,\n                  city = this.getCity(addressArray),\n                  area = this.getArea(addressArray),\n                  state = this.getState(addressArray);\n            this.setState({\n              adress: address ? address : \"\",\n              area: area ? area : \"\",\n              city: city ? city : \"\",\n              state: state ? state : \"\"\n            });\n          });\n        });\n      });\n    };\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let index = 0; index < addressArray.length; index++) {\n        if (addressArray[index].types[0] && 'administrative_area_level_2' === addressArray[index].types[0]) {\n          city = addressArray[index].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onMarkerDragEnd = event => {\n      let newLat = event.latLng.lat();\n      let newLng = event.latLng.lng();\n      console.log('newLat', newLat);\n      console.log('newLng', newLng);\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        console.log(response);\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\",\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      });\n    };\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            newLat = place.geometry.location.lat(),\n            newLng = place.geometry.location.lng();\n      this.setState({\n        adress: address ? address : \"\",\n        area: area ? area : \"\",\n        city: city ? city : \"\",\n        state: state ? state : \"\",\n        markerPosition: {\n          lat: newLat,\n          lng: newLng\n        },\n        mapPosition: {\n          lat: newLat,\n          lng: newLng\n        }\n      });\n    };\n  }\n\n  render() {\n    const MapWithAMarker = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n      defaultZoom: 15,\n      defaultCenter: {\n        lat: 13.84839475068859,\n        lng: 100.56908802639256\n      },\n      defaultOptions: {\n        zoomControl: true,\n        scrollwheel: true,\n        streetViewControl: false,\n        draggable: true,\n        minZoom: 15,\n        maxZoom: 16,\n        mapTypeControl: false\n      },\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        draggable: true,\n        onDragEnd: this.onMarkerDragEnd,\n        position: {\n          lat: this.state.markerPosition.lat,\n          lng: this.state.markerPosition.lng\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-currentLocation\",\n        onClick: this.findMylocation,\n        children: \"your location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AutoComplete, {\n        style: {\n          width: \"100%\",\n          height: '40px',\n          paddingLeft: 16,\n          marginTop: 2,\n          marginBottom: '2rem'\n        },\n        types: ['(regions)'],\n        onPlaceSelected: this.onPlaceSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '1rem',\n        margin: '0 auto',\n        maxWidth: 600\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ku Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Descriptions, {\n        bordered: true,\n        children: /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n          label: \"Address\",\n          children: this.state.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapWithAMarker, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDrjHmzaE-oExXPRlnkij2Ko3svtUwy9p4&v=3.exp&libraries=geometry,drawing,places\",\n        loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 27\n        }, this),\n        containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `400px`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 29\n        }, this),\n        mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["F:/tryReact/googlemap/src/App.js"],"names":["React","InfoWindow","withScriptjs","withGoogleMap","GoogleMap","Marker","Geocode","throwStatement","Descriptions","AutoComplete","setApiKey","App","Component","state","address","city","area","zoom","height","mapPosition","lat","lng","markerPosition","findMylocation","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","fromLatLng","then","response","results","formatted_address","addressArray","address_components","getCity","getArea","getState","adress","index","length","types","long_name","i","j","onMarkerDragEnd","event","newLat","latLng","newLng","console","log","onPlaceSelected","place","geometry","location","render","MapWithAMarker","props","zoomControl","scrollwheel","streetViewControl","draggable","minZoom","maxZoom","mapTypeControl","width","paddingLeft","marginTop","marginBottom","padding","margin","maxWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './App.css'\nimport {\n  InfoWindow,\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} from \"react-google-maps\";\n\nimport Geocode from \"react-geocode\";\nimport { throwStatement } from \"@babel/types\";\nimport { Descriptions } from 'antd';\nimport AutoComplete from 'react-google-autocomplete'\n\nGeocode.setApiKey(\"AIzaSyDrjHmzaE-oExXPRlnkij2Ko3svtUwy9p4\");\n\nclass App extends React.Component {\n    \n    state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      zoom: 15,\n      height: 400,\n      mapPosition: {\n          lat: 0,\n          lng: 0,\n      },\n      markerPosition: {\n          lat: 13.84839475068859,\n          lng: 100.56908802639256,\n      }\n    }\n \n    findMylocation=()=>{\n        navigator.geolocation.getCurrentPosition(position=>{\n          this.setState({\n            mapPosition: {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            },\n            markerPosition: {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n          },()=>{\n            Geocode.fromLatLng(position.coords.latitude,position.coords.longitude)\n              .then(response=>{\n                  const address = response.results[0].formatted_address,\n                        addressArray = response.results[0].address_components,\n                        city = this.getCity(addressArray),\n                        area= this.getArea(addressArray),\n                        state = this.getState(addressArray);\n                  this.setState({\n                    adress: (address) ? address : \"\",\n                    area: (area) ? area : \"\",\n                    city: (city) ? city : \"\",\n                    state: (state) ? state : \"\",\n            })\n          })\n          })\n        })\n    }\n    getCity = (addressArray) =>{\n      let city = '';\n      for (let index = 0 ; index < addressArray.length ;index++){\n        if(addressArray[index].types[0] && 'administrative_area_level_2'=== addressArray[index].types[0]){\n          city = addressArray[index].long_name;\n          return city;\n        }\n      }\n    }\n    getArea = (addressArray) => {\n      let area = '';\n      for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0]) {\n              for (let j = 0; j < addressArray[i].types.length; j++) {\n                  if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n                      area = addressArray[i].long_name;\n                      return area;\n                  }\n              }\n          }\n      }\n    };\n\n    getState = (addressArray) => {\n        let state = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            for (let i = 0; i < addressArray.length; i++) {\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n                    state = addressArray[i].long_name;\n                    return state;\n                }\n            }\n        }\n    };   \n\n    onMarkerDragEnd = (event)=>{\n      \n      let newLat = event.latLng.lat();\n      let newLng= event.latLng.lng();\n      console.log('newLat',newLat);\n      console.log('newLng',newLng);\n      Geocode.fromLatLng(newLat,newLng)\n      .then(response=>{\n        console.log(response)\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area= this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: (address) ? address : \"\",\n          area: (area) ? area : \"\",\n          city: (city) ? city : \"\",\n          state: (state) ? state : \"\",\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n        })\n      })\n      \n    }\n\n    onPlaceSelected = (place)=>{\n      const address = place.formatted_address,\n        addressArray = place.address_components,\n        city = this.getCity(addressArray),\n        area = this.getArea(addressArray),\n        state = this.getState(addressArray),\n        newLat = place.geometry.location.lat(),\n        newLng = place.geometry.location.lng();\n      this.setState({\n        adress: (address) ? address : \"\",\n        area: (area) ? area : \"\",\n        city: (city) ? city : \"\",\n        state: (state) ? state : \"\",\n        markerPosition: {\n          lat: newLat,\n          lng: newLng\n        },\n        mapPosition: {\n          lat: newLat,\n          lng: newLng\n        },\n      })\n    }\n\n    \n    render(){\n      const MapWithAMarker = withScriptjs(withGoogleMap(props =>\n        <GoogleMap\n          \n          defaultZoom={15}\n          defaultCenter={{ lat:13.84839475068859, lng: 100.56908802639256 }}\n          defaultOptions={{\n            zoomControl:true,\n            scrollwheel:true,\n            streetViewControl: false,\n            draggable:true,\n            minZoom:15,\n            maxZoom:16,\n            mapTypeControl:false,\n          }}\n        >\n        \n          <Marker \n            draggable={true}\n            onDragEnd={this.onMarkerDragEnd}\n            position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n            \n            >  \n          </Marker>\n          <button class=\"button-currentLocation\" onClick={this.findMylocation}>your location</button>\n        <AutoComplete \n        \n          style={{width:\"100%\", height:'40px' , paddingLeft: 16 , marginTop:2 , marginBottom:'2rem'}}\n          types={['(regions)']}\n          onPlaceSelected={this.onPlaceSelected}\n          />\n        \n        </GoogleMap>\n      ));\n      return(\n        \n        <div style={{ padding: '1rem', margin: '0 auto', maxWidth: 600 }}>\n        <h1>Ku Map</h1>\n        \n        <Descriptions bordered>\n          {/* <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\n          <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\n          <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item> */}\n          <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\n        </Descriptions>        \n        <MapWithAMarker\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDrjHmzaE-oExXPRlnkij2Ko3svtUwy9p4&v=3.exp&libraries=geometry,drawing,places\"\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `400px` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n          \n        />\n        \n        </div>\n        \n        \n      );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}