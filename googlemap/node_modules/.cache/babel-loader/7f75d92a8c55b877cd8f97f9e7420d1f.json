{"ast":null,"code":"var _jsxFileName = \"F:\\\\tryReact\\\\googlemap\\\\src\\\\App.js\";\nimport React from \"react\";\nimport './App.css';\nimport { InfoWindow, withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport { throwStatement } from \"@babel/types\";\nimport { Descriptions } from 'antd';\nimport AutoComplete from 'react-google-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(\"AIzaSyDrjHmzaE-oExXPRlnkij2Ko3svtUwy9p4\");\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      zoom: 15,\n      height: 400,\n      mapPosition: {\n        lat: 0,\n        lng: 0\n      },\n      markerPosition: {\n        lat: 0,\n        lng: 0\n      }\n    };\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let index = 0; index < addressArray.length; index++) {\n        if (addressArray[index].types[0] && 'administrative_area_level_2' === addressArray[index].types[0]) {\n          city = addressArray[index].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onMarkerDragEnd = event => {\n      let newLat = event.latLng.lat();\n      let newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          adress: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\",\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      });\n    };\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            newLat = place.geometry.location.lat(),\n            newLng = place.geometry.location.lng();\n      this.setState({\n        adress: address ? address : \"\",\n        area: area ? area : \"\",\n        city: city ? city : \"\",\n        state: state ? state : \"\",\n        markerPosition: {\n          lat: newLat,\n          lng: newLng\n        },\n        mapPosition: {\n          lat: newLat,\n          lng: newLng\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          mapPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n          markerPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        }, () => {\n          Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(response => {\n            const address = response.results[0].formatted_address,\n                  addressArray = response.results[0].address_components,\n                  city = this.getCity(addressArray),\n                  area = this.getArea(addressArray),\n                  state = this.getState(addressArray);\n            this.setState({\n              adress: address ? address : \"\",\n              area: area ? area : \"\",\n              city: city ? city : \"\",\n              state: state ? state : \"\"\n            });\n          });\n        });\n      });\n    }\n  }\n\n  render() {\n    const MapWithAMarker = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n      defaultZoom: 8,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        draggable: true,\n        onDragEnd: this.onMarkerDragEnd,\n        position: {\n          lat: this.state.mapPosition.lat,\n          lng: this.state.mapPosition.lng\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AutoComplete, {\n        style: {\n          width: \"100%\",\n          height: '40px',\n          paddingLeft: 16,\n          marginTop: 2,\n          marginBottom: '2rem'\n        },\n        types: ['(regions)'],\n        onPlaceSelected: this.onPlaceSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"your location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '1rem',\n        margin: '0 auto',\n        maxWidth: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Google Map Basic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Descriptions, {\n        bordered: true,\n        children: [/*#__PURE__*/_jsxDEV(Descriptions.Item, {\n          label: \"City\",\n          children: this.state.city\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n          label: \"Area\",\n          children: this.state.area\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n          label: \"State\",\n          children: this.state.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n          label: \"Address\",\n          children: this.state.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapWithAMarker, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDrjHmzaE-oExXPRlnkij2Ko3svtUwy9p4&v=3.exp&libraries=geometry,drawing,places\",\n        loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 27\n        }, this),\n        containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `400px`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 29\n        }, this),\n        mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["F:/tryReact/googlemap/src/App.js"],"names":["React","InfoWindow","withScriptjs","withGoogleMap","GoogleMap","Marker","Geocode","throwStatement","Descriptions","AutoComplete","setApiKey","App","Component","state","address","city","area","zoom","height","mapPosition","lat","lng","markerPosition","getCity","addressArray","index","length","types","long_name","getArea","i","j","getState","onMarkerDragEnd","event","newLat","latLng","newLng","fromLatLng","then","response","results","formatted_address","address_components","setState","adress","onPlaceSelected","place","geometry","location","componentDidMount","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","render","MapWithAMarker","props","width","paddingLeft","marginTop","marginBottom","padding","margin","maxWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './App.css'\nimport {\n  InfoWindow,\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport { throwStatement } from \"@babel/types\";\nimport { Descriptions } from 'antd';\nimport AutoComplete from 'react-google-autocomplete'\n\nGeocode.setApiKey(\"AIzaSyDrjHmzaE-oExXPRlnkij2Ko3svtUwy9p4\");\n\nclass App extends React.Component {\n\n    state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      zoom: 15,\n      height: 400,\n      mapPosition: {\n          lat: 0,\n          lng: 0,\n      },\n      markerPosition: {\n          lat: 0,\n          lng: 0,\n      }\n    }\n\n    componentDidMount(){\n      if(navigator.geolocation){\n        navigator.geolocation.getCurrentPosition(position=>{\n          this.setState({\n            mapPosition: {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            },\n            markerPosition: {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n          },()=>{\n            Geocode.fromLatLng(position.coords.latitude,position.coords.longitude)\n              .then(response=>{\n                  const address = response.results[0].formatted_address,\n                        addressArray = response.results[0].address_components,\n                        city = this.getCity(addressArray),\n                        area= this.getArea(addressArray),\n                        state = this.getState(addressArray);\n                  this.setState({\n                    adress: (address) ? address : \"\",\n                    area: (area) ? area : \"\",\n                    city: (city) ? city : \"\",\n                    state: (state) ? state : \"\",\n\n            })\n          })\n          })\n        })\n      }\n    }\n    getCity = (addressArray) =>{\n      let city = '';\n      for (let index = 0 ; index < addressArray.length ;index++){\n        if(addressArray[index].types[0] && 'administrative_area_level_2'=== addressArray[index].types[0]){\n          city = addressArray[index].long_name;\n          return city;\n        }\n      }\n    }\n    getArea = (addressArray) => {\n      let area = '';\n      for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0]) {\n              for (let j = 0; j < addressArray[i].types.length; j++) {\n                  if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n                      area = addressArray[i].long_name;\n                      return area;\n                  }\n              }\n          }\n      }\n    };\n\n    getState = (addressArray) => {\n        let state = '';\n        for (let i = 0; i < addressArray.length; i++) {\n            for (let i = 0; i < addressArray.length; i++) {\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n                    state = addressArray[i].long_name;\n                    return state;\n                }\n            }\n        }\n    };   \n\n    onMarkerDragEnd = (event)=>{\n      let newLat = event.latLng.lat();\n      let newLng= event.latLng.lng();\n\n      Geocode.fromLatLng(newLat,newLng)\n      .then(response=>{\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area= this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          adress: (address) ? address : \"\",\n          area: (area) ? area : \"\",\n          city: (city) ? city : \"\",\n          state: (state) ? state : \"\",\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n        })\n      })\n    }\n\n    onPlaceSelected = (place)=>{\n      const address = place.formatted_address,\n        addressArray = place.address_components,\n        city = this.getCity(addressArray),\n        area = this.getArea(addressArray),\n        state = this.getState(addressArray),\n        newLat = place.geometry.location.lat(),\n        newLng = place.geometry.location.lng();\n      this.setState({\n        adress: (address) ? address : \"\",\n        area: (area) ? area : \"\",\n        city: (city) ? city : \"\",\n        state: (state) ? state : \"\",\n        markerPosition: {\n          lat: newLat,\n          lng: newLng\n        },\n        mapPosition: {\n          lat: newLat,\n          lng: newLng\n        },\n      })\n    }\n\n  \n    render(){\n      const MapWithAMarker = withScriptjs(withGoogleMap(props =>\n        <GoogleMap\n          defaultZoom={8}\n          defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n        >\n          <Marker \n            draggable={true}\n            onDragEnd={this.onMarkerDragEnd}\n            position={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n            >  \n          </Marker>\n        <AutoComplete \n        \n          style={{width:\"100%\", height:'40px' , paddingLeft: 16 , marginTop:2 , marginBottom:'2rem'}}\n          types={['(regions)']}\n          onPlaceSelected={this.onPlaceSelected}\n          />\n        <button>your location</button>\n        </GoogleMap>\n      ));\n      return(\n        \n        <div style={{ padding: '1rem', margin: '0 auto', maxWidth: 1000 }}>\n        <h1>Google Map Basic</h1>\n        <Descriptions bordered>\n          <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\n          <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\n          <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item>\n          <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\n        </Descriptions>        \n        <MapWithAMarker\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDrjHmzaE-oExXPRlnkij2Ko3svtUwy9p4&v=3.exp&libraries=geometry,drawing,places\"\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `400px` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n        />\n        \n        </div>\n        \n        \n      );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}