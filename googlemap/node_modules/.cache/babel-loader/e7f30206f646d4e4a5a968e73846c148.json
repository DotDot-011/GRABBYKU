{"ast":null,"code":"\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nvar _core = require(\"./core\");\n\nvar _is = require(\"../validators/is\");\n\nconst bool = (0, _utils.assertValueType)(\"boolean\");\nconst tSFunctionTypeAnnotationCommon = {\n  returnType: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true\n  },\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true\n  }\n};\n(0, _utils.default)(\"TSParameterProperty\", {\n  aliases: [\"LVal\"],\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    parameter: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"AssignmentPattern\")\n    }\n  }\n});\n(0, _utils.default)(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _core.functionDeclarationCommon, tSFunctionTypeAnnotationCommon)\n});\n(0, _utils.default)(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _core.classMethodOrDeclareMethodCommon, tSFunctionTypeAnnotationCommon)\n});\n(0, _utils.default)(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: (0, _utils.validateType)(\"TSEntityName\"),\n    right: (0, _utils.validateType)(\"Identifier\")\n  }\n});\nconst signatureDeclarationCommon = {\n  typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n  parameters: (0, _utils.validateArrayOfType)([\"Identifier\", \"RestElement\"]),\n  typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n};\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon\n};\n(0, _utils.default)(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\n(0, _utils.default)(\"TSConstructSignatureDeclaration\", callConstructSignatureDeclaration);\nconst namedTypeElementCommon = {\n  key: (0, _utils.validateType)(\"Expression\"),\n  computed: (0, _utils.validate)(bool),\n  optional: (0, _utils.validateOptional)(bool)\n};\n(0, _utils.default)(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\", \"initializer\"],\n  fields: Object.assign({}, namedTypeElementCommon, {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  })\n});\n(0, _utils.default)(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: Object.assign({}, signatureDeclarationCommon, namedTypeElementCommon, {\n    kind: {\n      validate: (0, _utils.assertOneOf)(\"method\", \"get\", \"set\")\n    }\n  })\n});\n(0, _utils.default)(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    static: (0, _utils.validateOptional)(bool),\n    parameters: (0, _utils.validateArrayOfType)(\"Identifier\"),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n  }\n});\nconst tsKeywordTypes = [\"TSAnyKeyword\", \"TSBooleanKeyword\", \"TSBigIntKeyword\", \"TSIntrinsicKeyword\", \"TSNeverKeyword\", \"TSNullKeyword\", \"TSNumberKeyword\", \"TSObjectKeyword\", \"TSStringKeyword\", \"TSSymbolKeyword\", \"TSUndefinedKeyword\", \"TSUnknownKeyword\", \"TSVoidKeyword\"];\n\nfor (const type of tsKeywordTypes) {\n  (0, _utils.default)(type, {\n    aliases: [\"TSType\", \"TSBaseType\"],\n    visitor: [],\n    fields: {}\n  });\n}\n\n(0, _utils.default)(\"TSThisType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [],\n  fields: {}\n});\nconst fnOrCtrBase = {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"]\n};\n(0, _utils.default)(\"TSFunctionType\", Object.assign({}, fnOrCtrBase, {\n  fields: signatureDeclarationCommon\n}));\n(0, _utils.default)(\"TSConstructorType\", Object.assign({}, fnOrCtrBase, {\n  fields: Object.assign({}, signatureDeclarationCommon, {\n    abstract: (0, _utils.validateOptional)(bool)\n  })\n}));\n(0, _utils.default)(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: (0, _utils.validateType)([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    asserts: (0, _utils.validateOptional)(bool)\n  }\n});\n(0, _utils.default)(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\"],\n  fields: {\n    exprName: (0, _utils.validateType)([\"TSEntityName\", \"TSImportType\"])\n  }\n});\n(0, _utils.default)(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\n(0, _utils.default)(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: (0, _utils.validateArrayOfType)([\"TSType\", \"TSNamedTupleMember\"])\n  }\n});\n(0, _utils.default)(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSNamedTupleMember\", {\n  visitor: [\"label\", \"elementType\"],\n  builder: [\"label\", \"elementType\", \"optional\"],\n  fields: {\n    label: (0, _utils.validateType)(\"Identifier\"),\n    optional: {\n      validate: bool,\n      default: false\n    },\n    elementType: (0, _utils.validateType)(\"TSType\")\n  }\n});\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: (0, _utils.validateArrayOfType)(\"TSType\")\n  }\n};\n(0, _utils.default)(\"TSUnionType\", unionOrIntersection);\n(0, _utils.default)(\"TSIntersectionType\", unionOrIntersection);\n(0, _utils.default)(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: (0, _utils.validateType)(\"TSType\"),\n    extendsType: (0, _utils.validateType)(\"TSType\"),\n    trueType: (0, _utils.validateType)(\"TSType\"),\n    falseType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\")\n  }\n});\n(0, _utils.default)(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: (0, _utils.validate)((0, _utils.assertValueType)(\"string\")),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: (0, _utils.validateType)(\"TSType\"),\n    indexType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\", \"nameType\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\"),\n    optional: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSType\"),\n    nameType: (0, _utils.validateOptionalType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSLiteralType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: {\n      validate: function () {\n        const unaryExpression = (0, _utils.assertNodeType)(\"NumericLiteral\", \"BigIntLiteral\");\n        const unaryOperator = (0, _utils.assertOneOf)(\"-\");\n        const literal = (0, _utils.assertNodeType)(\"NumericLiteral\", \"StringLiteral\", \"BooleanLiteral\", \"BigIntLiteral\");\n\n        function validator(parent, key, node) {\n          if ((0, _is.default)(\"UnaryExpression\", node)) {\n            unaryOperator(node, \"operator\", node.operator);\n            unaryExpression(node, \"argument\", node.argument);\n          } else {\n            literal(parent, key, node);\n          }\n        }\n\n        validator.oneOfNodeTypes = [\"NumericLiteral\", \"StringLiteral\", \"BooleanLiteral\", \"BigIntLiteral\", \"UnaryExpression\"];\n        return validator;\n      }()\n    }\n  }\n});\n(0, _utils.default)(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSInterfaceDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\"TSExpressionWithTypeArguments\")),\n    body: (0, _utils.validateType)(\"TSInterfaceBody\")\n  }\n});\n(0, _utils.default)(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\n(0, _utils.default)(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSAsExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTypeAssertion\", {\n  aliases: [\"Expression\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\"),\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSEnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    const: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    members: (0, _utils.validateArrayOfType)(\"TSEnumMember\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    global: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    body: (0, _utils.validateType)([\"TSModuleBlock\", \"TSModuleDeclaration\"])\n  }\n});\n(0, _utils.default)(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"Statement\")\n  }\n});\n(0, _utils.default)(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: (0, _utils.validateType)(\"StringLiteral\"),\n    qualifier: (0, _utils.validateOptionalType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: (0, _utils.validate)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    moduleReference: (0, _utils.validateType)([\"TSEntityName\", \"TSExternalModuleReference\"])\n  }\n});\n(0, _utils.default)(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"StringLiteral\")\n  }\n});\n(0, _utils.default)(\"TSNonNullExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\")\n  }\n});\n(0, _utils.default)(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TSType\")\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSType\")))\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSTypeParameter\")))\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    },\n    constraint: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    },\n    default: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    }\n  }\n});","map":{"version":3,"sources":["F:/tryReact/googlemap/node_modules/@babel/types/lib/definitions/typescript.js"],"names":["_utils","require","_core","_is","bool","assertValueType","tSFunctionTypeAnnotationCommon","returnType","validate","assertNodeType","optional","typeParameters","default","aliases","visitor","fields","accessibility","assertOneOf","readonly","parameter","Object","assign","functionDeclarationCommon","classMethodOrDeclareMethodCommon","left","validateType","right","signatureDeclarationCommon","validateOptionalType","parameters","validateArrayOfType","typeAnnotation","callConstructSignatureDeclaration","namedTypeElementCommon","key","computed","validateOptional","initializer","kind","static","tsKeywordTypes","type","fnOrCtrBase","abstract","typeName","builder","parameterName","asserts","exprName","members","elementType","elementTypes","label","unionOrIntersection","types","checkType","extendsType","trueType","falseType","typeParameter","operator","objectType","indexType","nameType","literal","unaryExpression","unaryOperator","validator","parent","node","argument","oneOfNodeTypes","expression","declare","id","extends","arrayOfType","body","const","global","qualifier","isExport","moduleReference","params","chain","assertEach","name","constraint"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,QAAD,CAAnB;;AAEA,IAAIE,GAAG,GAAGF,OAAO,CAAC,kBAAD,CAAjB;;AAEA,MAAMG,IAAI,GAAG,CAAC,GAAGJ,MAAM,CAACK,eAAX,EAA4B,SAA5B,CAAb;AACA,MAAMC,8BAA8B,GAAG;AACrCC,EAAAA,UAAU,EAAE;AACVC,IAAAA,QAAQ,EAAE,CAAC,GAAGR,MAAM,CAACS,cAAX,EAA2B,kBAA3B,EAA+C,MAA/C,CADA;AAEVC,IAAAA,QAAQ,EAAE;AAFA,GADyB;AAKrCC,EAAAA,cAAc,EAAE;AACdH,IAAAA,QAAQ,EAAE,CAAC,GAAGR,MAAM,CAACS,cAAX,EAA2B,4BAA3B,EAAyD,MAAzD,CADI;AAEdC,IAAAA,QAAQ,EAAE;AAFI;AALqB,CAAvC;AAUA,CAAC,GAAGV,MAAM,CAACY,OAAX,EAAoB,qBAApB,EAA2C;AACzCC,EAAAA,OAAO,EAAE,CAAC,MAAD,CADgC;AAEzCC,EAAAA,OAAO,EAAE,CAAC,WAAD,CAFgC;AAGzCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,aAAa,EAAE;AACbR,MAAAA,QAAQ,EAAE,CAAC,GAAGR,MAAM,CAACiB,WAAX,EAAwB,QAAxB,EAAkC,SAAlC,EAA6C,WAA7C,CADG;AAEbP,MAAAA,QAAQ,EAAE;AAFG,KADT;AAKNQ,IAAAA,QAAQ,EAAE;AACRV,MAAAA,QAAQ,EAAE,CAAC,GAAGR,MAAM,CAACK,eAAX,EAA4B,SAA5B,CADF;AAERK,MAAAA,QAAQ,EAAE;AAFF,KALJ;AASNS,IAAAA,SAAS,EAAE;AACTX,MAAAA,QAAQ,EAAE,CAAC,GAAGR,MAAM,CAACS,cAAX,EAA2B,YAA3B,EAAyC,mBAAzC;AADD;AATL;AAHiC,CAA3C;AAiBA,CAAC,GAAGT,MAAM,CAACY,OAAX,EAAoB,mBAApB,EAAyC;AACvCC,EAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,aAAd,CAD8B;AAEvCC,EAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,gBAAP,EAAyB,QAAzB,EAAmC,YAAnC,CAF8B;AAGvCC,EAAAA,MAAM,EAAEK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,KAAK,CAACoB,yBAAxB,EAAmDhB,8BAAnD;AAH+B,CAAzC;AAKA,CAAC,GAAGN,MAAM,CAACY,OAAX,EAAoB,iBAApB,EAAuC;AACrCE,EAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,KAAf,EAAsB,gBAAtB,EAAwC,QAAxC,EAAkD,YAAlD,CAD4B;AAErCC,EAAAA,MAAM,EAAEK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,KAAK,CAACqB,gCAAxB,EAA0DjB,8BAA1D;AAF6B,CAAvC;AAIA,CAAC,GAAGN,MAAM,CAACY,OAAX,EAAoB,iBAApB,EAAuC;AACrCC,EAAAA,OAAO,EAAE,CAAC,cAAD,CAD4B;AAErCC,EAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,OAAT,CAF4B;AAGrCC,EAAAA,MAAM,EAAE;AACNS,IAAAA,IAAI,EAAE,CAAC,GAAGxB,MAAM,CAACyB,YAAX,EAAyB,cAAzB,CADA;AAENC,IAAAA,KAAK,EAAE,CAAC,GAAG1B,MAAM,CAACyB,YAAX,EAAyB,YAAzB;AAFD;AAH6B,CAAvC;AAQA,MAAME,0BAA0B,GAAG;AACjChB,EAAAA,cAAc,EAAE,CAAC,GAAGX,MAAM,CAAC4B,oBAAX,EAAiC,4BAAjC,CADiB;AAEjCC,EAAAA,UAAU,EAAE,CAAC,GAAG7B,MAAM,CAAC8B,mBAAX,EAAgC,CAAC,YAAD,EAAe,aAAf,CAAhC,CAFqB;AAGjCC,EAAAA,cAAc,EAAE,CAAC,GAAG/B,MAAM,CAAC4B,oBAAX,EAAiC,kBAAjC;AAHiB,CAAnC;AAKA,MAAMI,iCAAiC,GAAG;AACxCnB,EAAAA,OAAO,EAAE,CAAC,eAAD,CAD+B;AAExCC,EAAAA,OAAO,EAAE,CAAC,gBAAD,EAAmB,YAAnB,EAAiC,gBAAjC,CAF+B;AAGxCC,EAAAA,MAAM,EAAEY;AAHgC,CAA1C;AAKA,CAAC,GAAG3B,MAAM,CAACY,OAAX,EAAoB,4BAApB,EAAkDoB,iCAAlD;AACA,CAAC,GAAGhC,MAAM,CAACY,OAAX,EAAoB,iCAApB,EAAuDoB,iCAAvD;AACA,MAAMC,sBAAsB,GAAG;AAC7BC,EAAAA,GAAG,EAAE,CAAC,GAAGlC,MAAM,CAACyB,YAAX,EAAyB,YAAzB,CADwB;AAE7BU,EAAAA,QAAQ,EAAE,CAAC,GAAGnC,MAAM,CAACQ,QAAX,EAAqBJ,IAArB,CAFmB;AAG7BM,EAAAA,QAAQ,EAAE,CAAC,GAAGV,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B;AAHmB,CAA/B;AAKA,CAAC,GAAGJ,MAAM,CAACY,OAAX,EAAoB,qBAApB,EAA2C;AACzCC,EAAAA,OAAO,EAAE,CAAC,eAAD,CADgC;AAEzCC,EAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,gBAAR,EAA0B,aAA1B,CAFgC;AAGzCC,EAAAA,MAAM,EAAEK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBY,sBAAlB,EAA0C;AAChDf,IAAAA,QAAQ,EAAE,CAAC,GAAGlB,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B,CADsC;AAEhD2B,IAAAA,cAAc,EAAE,CAAC,GAAG/B,MAAM,CAAC4B,oBAAX,EAAiC,kBAAjC,CAFgC;AAGhDS,IAAAA,WAAW,EAAE,CAAC,GAAGrC,MAAM,CAAC4B,oBAAX,EAAiC,YAAjC;AAHmC,GAA1C;AAHiC,CAA3C;AASA,CAAC,GAAG5B,MAAM,CAACY,OAAX,EAAoB,mBAApB,EAAyC;AACvCC,EAAAA,OAAO,EAAE,CAAC,eAAD,CAD8B;AAEvCC,EAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,gBAAR,EAA0B,YAA1B,EAAwC,gBAAxC,CAF8B;AAGvCC,EAAAA,MAAM,EAAEK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBM,0BAAlB,EAA8CM,sBAA9C,EAAsE;AAC5EK,IAAAA,IAAI,EAAE;AACJ9B,MAAAA,QAAQ,EAAE,CAAC,GAAGR,MAAM,CAACiB,WAAX,EAAwB,QAAxB,EAAkC,KAAlC,EAAyC,KAAzC;AADN;AADsE,GAAtE;AAH+B,CAAzC;AASA,CAAC,GAAGjB,MAAM,CAACY,OAAX,EAAoB,kBAApB,EAAwC;AACtCC,EAAAA,OAAO,EAAE,CAAC,eAAD,CAD6B;AAEtCC,EAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,gBAAf,CAF6B;AAGtCC,EAAAA,MAAM,EAAE;AACNG,IAAAA,QAAQ,EAAE,CAAC,GAAGlB,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B,CADJ;AAENmC,IAAAA,MAAM,EAAE,CAAC,GAAGvC,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B,CAFF;AAGNyB,IAAAA,UAAU,EAAE,CAAC,GAAG7B,MAAM,CAAC8B,mBAAX,EAAgC,YAAhC,CAHN;AAINC,IAAAA,cAAc,EAAE,CAAC,GAAG/B,MAAM,CAAC4B,oBAAX,EAAiC,kBAAjC;AAJV;AAH8B,CAAxC;AAUA,MAAMY,cAAc,GAAG,CAAC,cAAD,EAAiB,kBAAjB,EAAqC,iBAArC,EAAwD,oBAAxD,EAA8E,gBAA9E,EAAgG,eAAhG,EAAiH,iBAAjH,EAAoI,iBAApI,EAAuJ,iBAAvJ,EAA0K,iBAA1K,EAA6L,oBAA7L,EAAmN,kBAAnN,EAAuO,eAAvO,CAAvB;;AAEA,KAAK,MAAMC,IAAX,IAAmBD,cAAnB,EAAmC;AACjC,GAAC,GAAGxC,MAAM,CAACY,OAAX,EAAoB6B,IAApB,EAA0B;AACxB5B,IAAAA,OAAO,EAAE,CAAC,QAAD,EAAW,YAAX,CADe;AAExBC,IAAAA,OAAO,EAAE,EAFe;AAGxBC,IAAAA,MAAM,EAAE;AAHgB,GAA1B;AAKD;;AAED,CAAC,GAAGf,MAAM,CAACY,OAAX,EAAoB,YAApB,EAAkC;AAChCC,EAAAA,OAAO,EAAE,CAAC,QAAD,EAAW,YAAX,CADuB;AAEhCC,EAAAA,OAAO,EAAE,EAFuB;AAGhCC,EAAAA,MAAM,EAAE;AAHwB,CAAlC;AAKA,MAAM2B,WAAW,GAAG;AAClB7B,EAAAA,OAAO,EAAE,CAAC,QAAD,CADS;AAElBC,EAAAA,OAAO,EAAE,CAAC,gBAAD,EAAmB,YAAnB,EAAiC,gBAAjC;AAFS,CAApB;AAIA,CAAC,GAAGd,MAAM,CAACY,OAAX,EAAoB,gBAApB,EAAsCQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBqB,WAAlB,EAA+B;AACnE3B,EAAAA,MAAM,EAAEY;AAD2D,CAA/B,CAAtC;AAGA,CAAC,GAAG3B,MAAM,CAACY,OAAX,EAAoB,mBAApB,EAAyCQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBqB,WAAlB,EAA+B;AACtE3B,EAAAA,MAAM,EAAEK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBM,0BAAlB,EAA8C;AACpDgB,IAAAA,QAAQ,EAAE,CAAC,GAAG3C,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B;AAD0C,GAA9C;AAD8D,CAA/B,CAAzC;AAKA,CAAC,GAAGJ,MAAM,CAACY,OAAX,EAAoB,iBAApB,EAAuC;AACrCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CAD4B;AAErCC,EAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,gBAAb,CAF4B;AAGrCC,EAAAA,MAAM,EAAE;AACN6B,IAAAA,QAAQ,EAAE,CAAC,GAAG5C,MAAM,CAACyB,YAAX,EAAyB,cAAzB,CADJ;AAENd,IAAAA,cAAc,EAAE,CAAC,GAAGX,MAAM,CAAC4B,oBAAX,EAAiC,8BAAjC;AAFV;AAH6B,CAAvC;AAQA,CAAC,GAAG5B,MAAM,CAACY,OAAX,EAAoB,iBAApB,EAAuC;AACrCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CAD4B;AAErCC,EAAAA,OAAO,EAAE,CAAC,eAAD,EAAkB,gBAAlB,CAF4B;AAGrC+B,EAAAA,OAAO,EAAE,CAAC,eAAD,EAAkB,gBAAlB,EAAoC,SAApC,CAH4B;AAIrC9B,EAAAA,MAAM,EAAE;AACN+B,IAAAA,aAAa,EAAE,CAAC,GAAG9C,MAAM,CAACyB,YAAX,EAAyB,CAAC,YAAD,EAAe,YAAf,CAAzB,CADT;AAENM,IAAAA,cAAc,EAAE,CAAC,GAAG/B,MAAM,CAAC4B,oBAAX,EAAiC,kBAAjC,CAFV;AAGNmB,IAAAA,OAAO,EAAE,CAAC,GAAG/C,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B;AAHH;AAJ6B,CAAvC;AAUA,CAAC,GAAGJ,MAAM,CAACY,OAAX,EAAoB,aAApB,EAAmC;AACjCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CADwB;AAEjCC,EAAAA,OAAO,EAAE,CAAC,UAAD,CAFwB;AAGjCC,EAAAA,MAAM,EAAE;AACNiC,IAAAA,QAAQ,EAAE,CAAC,GAAGhD,MAAM,CAACyB,YAAX,EAAyB,CAAC,cAAD,EAAiB,cAAjB,CAAzB;AADJ;AAHyB,CAAnC;AAOA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,eAApB,EAAqC;AACnCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CAD0B;AAEnCC,EAAAA,OAAO,EAAE,CAAC,SAAD,CAF0B;AAGnCC,EAAAA,MAAM,EAAE;AACNkC,IAAAA,OAAO,EAAE,CAAC,GAAGjD,MAAM,CAAC8B,mBAAX,EAAgC,eAAhC;AADH;AAH2B,CAArC;AAOA,CAAC,GAAG9B,MAAM,CAACY,OAAX,EAAoB,aAApB,EAAmC;AACjCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CADwB;AAEjCC,EAAAA,OAAO,EAAE,CAAC,aAAD,CAFwB;AAGjCC,EAAAA,MAAM,EAAE;AACNmC,IAAAA,WAAW,EAAE,CAAC,GAAGlD,MAAM,CAACyB,YAAX,EAAyB,QAAzB;AADP;AAHyB,CAAnC;AAOA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,aAApB,EAAmC;AACjCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CADwB;AAEjCC,EAAAA,OAAO,EAAE,CAAC,cAAD,CAFwB;AAGjCC,EAAAA,MAAM,EAAE;AACNoC,IAAAA,YAAY,EAAE,CAAC,GAAGnD,MAAM,CAAC8B,mBAAX,EAAgC,CAAC,QAAD,EAAW,oBAAX,CAAhC;AADR;AAHyB,CAAnC;AAOA,CAAC,GAAG9B,MAAM,CAACY,OAAX,EAAoB,gBAApB,EAAsC;AACpCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CAD2B;AAEpCC,EAAAA,OAAO,EAAE,CAAC,gBAAD,CAF2B;AAGpCC,EAAAA,MAAM,EAAE;AACNgB,IAAAA,cAAc,EAAE,CAAC,GAAG/B,MAAM,CAACyB,YAAX,EAAyB,QAAzB;AADV;AAH4B,CAAtC;AAOA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,YAApB,EAAkC;AAChCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CADuB;AAEhCC,EAAAA,OAAO,EAAE,CAAC,gBAAD,CAFuB;AAGhCC,EAAAA,MAAM,EAAE;AACNgB,IAAAA,cAAc,EAAE,CAAC,GAAG/B,MAAM,CAACyB,YAAX,EAAyB,QAAzB;AADV;AAHwB,CAAlC;AAOA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,oBAApB,EAA0C;AACxCE,EAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,aAAV,CAD+B;AAExC+B,EAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,aAAV,EAAyB,UAAzB,CAF+B;AAGxC9B,EAAAA,MAAM,EAAE;AACNqC,IAAAA,KAAK,EAAE,CAAC,GAAGpD,MAAM,CAACyB,YAAX,EAAyB,YAAzB,CADD;AAENf,IAAAA,QAAQ,EAAE;AACRF,MAAAA,QAAQ,EAAEJ,IADF;AAERQ,MAAAA,OAAO,EAAE;AAFD,KAFJ;AAMNsC,IAAAA,WAAW,EAAE,CAAC,GAAGlD,MAAM,CAACyB,YAAX,EAAyB,QAAzB;AANP;AAHgC,CAA1C;AAYA,MAAM4B,mBAAmB,GAAG;AAC1BxC,EAAAA,OAAO,EAAE,CAAC,QAAD,CADiB;AAE1BC,EAAAA,OAAO,EAAE,CAAC,OAAD,CAFiB;AAG1BC,EAAAA,MAAM,EAAE;AACNuC,IAAAA,KAAK,EAAE,CAAC,GAAGtD,MAAM,CAAC8B,mBAAX,EAAgC,QAAhC;AADD;AAHkB,CAA5B;AAOA,CAAC,GAAG9B,MAAM,CAACY,OAAX,EAAoB,aAApB,EAAmCyC,mBAAnC;AACA,CAAC,GAAGrD,MAAM,CAACY,OAAX,EAAoB,oBAApB,EAA0CyC,mBAA1C;AACA,CAAC,GAAGrD,MAAM,CAACY,OAAX,EAAoB,mBAApB,EAAyC;AACvCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CAD8B;AAEvCC,EAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,aAAd,EAA6B,UAA7B,EAAyC,WAAzC,CAF8B;AAGvCC,EAAAA,MAAM,EAAE;AACNwC,IAAAA,SAAS,EAAE,CAAC,GAAGvD,MAAM,CAACyB,YAAX,EAAyB,QAAzB,CADL;AAEN+B,IAAAA,WAAW,EAAE,CAAC,GAAGxD,MAAM,CAACyB,YAAX,EAAyB,QAAzB,CAFP;AAGNgC,IAAAA,QAAQ,EAAE,CAAC,GAAGzD,MAAM,CAACyB,YAAX,EAAyB,QAAzB,CAHJ;AAINiC,IAAAA,SAAS,EAAE,CAAC,GAAG1D,MAAM,CAACyB,YAAX,EAAyB,QAAzB;AAJL;AAH+B,CAAzC;AAUA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,aAApB,EAAmC;AACjCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CADwB;AAEjCC,EAAAA,OAAO,EAAE,CAAC,eAAD,CAFwB;AAGjCC,EAAAA,MAAM,EAAE;AACN4C,IAAAA,aAAa,EAAE,CAAC,GAAG3D,MAAM,CAACyB,YAAX,EAAyB,iBAAzB;AADT;AAHyB,CAAnC;AAOA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,qBAApB,EAA2C;AACzCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CADgC;AAEzCC,EAAAA,OAAO,EAAE,CAAC,gBAAD,CAFgC;AAGzCC,EAAAA,MAAM,EAAE;AACNgB,IAAAA,cAAc,EAAE,CAAC,GAAG/B,MAAM,CAACyB,YAAX,EAAyB,QAAzB;AADV;AAHiC,CAA3C;AAOA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,gBAApB,EAAsC;AACpCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CAD2B;AAEpCC,EAAAA,OAAO,EAAE,CAAC,gBAAD,CAF2B;AAGpCC,EAAAA,MAAM,EAAE;AACN6C,IAAAA,QAAQ,EAAE,CAAC,GAAG5D,MAAM,CAACQ,QAAX,EAAqB,CAAC,GAAGR,MAAM,CAACK,eAAX,EAA4B,QAA5B,CAArB,CADJ;AAEN0B,IAAAA,cAAc,EAAE,CAAC,GAAG/B,MAAM,CAACyB,YAAX,EAAyB,QAAzB;AAFV;AAH4B,CAAtC;AAQA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,qBAApB,EAA2C;AACzCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CADgC;AAEzCC,EAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,WAAf,CAFgC;AAGzCC,EAAAA,MAAM,EAAE;AACN8C,IAAAA,UAAU,EAAE,CAAC,GAAG7D,MAAM,CAACyB,YAAX,EAAyB,QAAzB,CADN;AAENqC,IAAAA,SAAS,EAAE,CAAC,GAAG9D,MAAM,CAACyB,YAAX,EAAyB,QAAzB;AAFL;AAHiC,CAA3C;AAQA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,cAApB,EAAoC;AAClCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CADyB;AAElCC,EAAAA,OAAO,EAAE,CAAC,eAAD,EAAkB,gBAAlB,EAAoC,UAApC,CAFyB;AAGlCC,EAAAA,MAAM,EAAE;AACNG,IAAAA,QAAQ,EAAE,CAAC,GAAGlB,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B,CADJ;AAENuD,IAAAA,aAAa,EAAE,CAAC,GAAG3D,MAAM,CAACyB,YAAX,EAAyB,iBAAzB,CAFT;AAGNf,IAAAA,QAAQ,EAAE,CAAC,GAAGV,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B,CAHJ;AAIN2B,IAAAA,cAAc,EAAE,CAAC,GAAG/B,MAAM,CAAC4B,oBAAX,EAAiC,QAAjC,CAJV;AAKNmC,IAAAA,QAAQ,EAAE,CAAC,GAAG/D,MAAM,CAAC4B,oBAAX,EAAiC,QAAjC;AALJ;AAH0B,CAApC;AAWA,CAAC,GAAG5B,MAAM,CAACY,OAAX,EAAoB,eAApB,EAAqC;AACnCC,EAAAA,OAAO,EAAE,CAAC,QAAD,EAAW,YAAX,CAD0B;AAEnCC,EAAAA,OAAO,EAAE,CAAC,SAAD,CAF0B;AAGnCC,EAAAA,MAAM,EAAE;AACNiD,IAAAA,OAAO,EAAE;AACPxD,MAAAA,QAAQ,EAAE,YAAY;AACpB,cAAMyD,eAAe,GAAG,CAAC,GAAGjE,MAAM,CAACS,cAAX,EAA2B,gBAA3B,EAA6C,eAA7C,CAAxB;AACA,cAAMyD,aAAa,GAAG,CAAC,GAAGlE,MAAM,CAACiB,WAAX,EAAwB,GAAxB,CAAtB;AACA,cAAM+C,OAAO,GAAG,CAAC,GAAGhE,MAAM,CAACS,cAAX,EAA2B,gBAA3B,EAA6C,eAA7C,EAA8D,gBAA9D,EAAgF,eAAhF,CAAhB;;AAEA,iBAAS0D,SAAT,CAAmBC,MAAnB,EAA2BlC,GAA3B,EAAgCmC,IAAhC,EAAsC;AACpC,cAAI,CAAC,GAAGlE,GAAG,CAACS,OAAR,EAAiB,iBAAjB,EAAoCyD,IAApC,CAAJ,EAA+C;AAC7CH,YAAAA,aAAa,CAACG,IAAD,EAAO,UAAP,EAAmBA,IAAI,CAACT,QAAxB,CAAb;AACAK,YAAAA,eAAe,CAACI,IAAD,EAAO,UAAP,EAAmBA,IAAI,CAACC,QAAxB,CAAf;AACD,WAHD,MAGO;AACLN,YAAAA,OAAO,CAACI,MAAD,EAASlC,GAAT,EAAcmC,IAAd,CAAP;AACD;AACF;;AAEDF,QAAAA,SAAS,CAACI,cAAV,GAA2B,CAAC,gBAAD,EAAmB,eAAnB,EAAoC,gBAApC,EAAsD,eAAtD,EAAuE,iBAAvE,CAA3B;AACA,eAAOJ,SAAP;AACD,OAhBS;AADH;AADH;AAH2B,CAArC;AAyBA,CAAC,GAAGnE,MAAM,CAACY,OAAX,EAAoB,+BAApB,EAAqD;AACnDC,EAAAA,OAAO,EAAE,CAAC,QAAD,CAD0C;AAEnDC,EAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,gBAAf,CAF0C;AAGnDC,EAAAA,MAAM,EAAE;AACNyD,IAAAA,UAAU,EAAE,CAAC,GAAGxE,MAAM,CAACyB,YAAX,EAAyB,cAAzB,CADN;AAENd,IAAAA,cAAc,EAAE,CAAC,GAAGX,MAAM,CAAC4B,oBAAX,EAAiC,8BAAjC;AAFV;AAH2C,CAArD;AAQA,CAAC,GAAG5B,MAAM,CAACY,OAAX,EAAoB,wBAApB,EAA8C;AAC5CC,EAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,aAAd,CADmC;AAE5CC,EAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,gBAAP,EAAyB,SAAzB,EAAoC,MAApC,CAFmC;AAG5CC,EAAAA,MAAM,EAAE;AACN0D,IAAAA,OAAO,EAAE,CAAC,GAAGzE,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B,CADH;AAENsE,IAAAA,EAAE,EAAE,CAAC,GAAG1E,MAAM,CAACyB,YAAX,EAAyB,YAAzB,CAFE;AAGNd,IAAAA,cAAc,EAAE,CAAC,GAAGX,MAAM,CAAC4B,oBAAX,EAAiC,4BAAjC,CAHV;AAIN+C,IAAAA,OAAO,EAAE,CAAC,GAAG3E,MAAM,CAACoC,gBAAX,EAA6B,CAAC,GAAGpC,MAAM,CAAC4E,WAAX,EAAwB,+BAAxB,CAA7B,CAJH;AAKNC,IAAAA,IAAI,EAAE,CAAC,GAAG7E,MAAM,CAACyB,YAAX,EAAyB,iBAAzB;AALA;AAHoC,CAA9C;AAWA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,iBAApB,EAAuC;AACrCE,EAAAA,OAAO,EAAE,CAAC,MAAD,CAD4B;AAErCC,EAAAA,MAAM,EAAE;AACN8D,IAAAA,IAAI,EAAE,CAAC,GAAG7E,MAAM,CAAC8B,mBAAX,EAAgC,eAAhC;AADA;AAF6B,CAAvC;AAMA,CAAC,GAAG9B,MAAM,CAACY,OAAX,EAAoB,wBAApB,EAA8C;AAC5CC,EAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,aAAd,CADmC;AAE5CC,EAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,gBAAP,EAAyB,gBAAzB,CAFmC;AAG5CC,EAAAA,MAAM,EAAE;AACN0D,IAAAA,OAAO,EAAE,CAAC,GAAGzE,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B,CADH;AAENsE,IAAAA,EAAE,EAAE,CAAC,GAAG1E,MAAM,CAACyB,YAAX,EAAyB,YAAzB,CAFE;AAGNd,IAAAA,cAAc,EAAE,CAAC,GAAGX,MAAM,CAAC4B,oBAAX,EAAiC,4BAAjC,CAHV;AAING,IAAAA,cAAc,EAAE,CAAC,GAAG/B,MAAM,CAACyB,YAAX,EAAyB,QAAzB;AAJV;AAHoC,CAA9C;AAUA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,gBAApB,EAAsC;AACpCC,EAAAA,OAAO,EAAE,CAAC,YAAD,CAD2B;AAEpCC,EAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,gBAAf,CAF2B;AAGpCC,EAAAA,MAAM,EAAE;AACNyD,IAAAA,UAAU,EAAE,CAAC,GAAGxE,MAAM,CAACyB,YAAX,EAAyB,YAAzB,CADN;AAENM,IAAAA,cAAc,EAAE,CAAC,GAAG/B,MAAM,CAACyB,YAAX,EAAyB,QAAzB;AAFV;AAH4B,CAAtC;AAQA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,iBAApB,EAAuC;AACrCC,EAAAA,OAAO,EAAE,CAAC,YAAD,CAD4B;AAErCC,EAAAA,OAAO,EAAE,CAAC,gBAAD,EAAmB,YAAnB,CAF4B;AAGrCC,EAAAA,MAAM,EAAE;AACNgB,IAAAA,cAAc,EAAE,CAAC,GAAG/B,MAAM,CAACyB,YAAX,EAAyB,QAAzB,CADV;AAEN+C,IAAAA,UAAU,EAAE,CAAC,GAAGxE,MAAM,CAACyB,YAAX,EAAyB,YAAzB;AAFN;AAH6B,CAAvC;AAQA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,mBAApB,EAAyC;AACvCC,EAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,aAAd,CAD8B;AAEvCC,EAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,SAAP,CAF8B;AAGvCC,EAAAA,MAAM,EAAE;AACN0D,IAAAA,OAAO,EAAE,CAAC,GAAGzE,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B,CADH;AAEN0E,IAAAA,KAAK,EAAE,CAAC,GAAG9E,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B,CAFD;AAGNsE,IAAAA,EAAE,EAAE,CAAC,GAAG1E,MAAM,CAACyB,YAAX,EAAyB,YAAzB,CAHE;AAINwB,IAAAA,OAAO,EAAE,CAAC,GAAGjD,MAAM,CAAC8B,mBAAX,EAAgC,cAAhC,CAJH;AAKNO,IAAAA,WAAW,EAAE,CAAC,GAAGrC,MAAM,CAAC4B,oBAAX,EAAiC,YAAjC;AALP;AAH+B,CAAzC;AAWA,CAAC,GAAG5B,MAAM,CAACY,OAAX,EAAoB,cAApB,EAAoC;AAClCE,EAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,aAAP,CADyB;AAElCC,EAAAA,MAAM,EAAE;AACN2D,IAAAA,EAAE,EAAE,CAAC,GAAG1E,MAAM,CAACyB,YAAX,EAAyB,CAAC,YAAD,EAAe,eAAf,CAAzB,CADE;AAENY,IAAAA,WAAW,EAAE,CAAC,GAAGrC,MAAM,CAAC4B,oBAAX,EAAiC,YAAjC;AAFP;AAF0B,CAApC;AAOA,CAAC,GAAG5B,MAAM,CAACY,OAAX,EAAoB,qBAApB,EAA2C;AACzCC,EAAAA,OAAO,EAAE,CAAC,WAAD,EAAc,aAAd,CADgC;AAEzCC,EAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,MAAP,CAFgC;AAGzCC,EAAAA,MAAM,EAAE;AACN0D,IAAAA,OAAO,EAAE,CAAC,GAAGzE,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B,CADH;AAEN2E,IAAAA,MAAM,EAAE,CAAC,GAAG/E,MAAM,CAACoC,gBAAX,EAA6BhC,IAA7B,CAFF;AAGNsE,IAAAA,EAAE,EAAE,CAAC,GAAG1E,MAAM,CAACyB,YAAX,EAAyB,CAAC,YAAD,EAAe,eAAf,CAAzB,CAHE;AAINoD,IAAAA,IAAI,EAAE,CAAC,GAAG7E,MAAM,CAACyB,YAAX,EAAyB,CAAC,eAAD,EAAkB,qBAAlB,CAAzB;AAJA;AAHiC,CAA3C;AAUA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,eAApB,EAAqC;AACnCC,EAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,OAAb,EAAsB,aAAtB,CAD0B;AAEnCC,EAAAA,OAAO,EAAE,CAAC,MAAD,CAF0B;AAGnCC,EAAAA,MAAM,EAAE;AACN8D,IAAAA,IAAI,EAAE,CAAC,GAAG7E,MAAM,CAAC8B,mBAAX,EAAgC,WAAhC;AADA;AAH2B,CAArC;AAOA,CAAC,GAAG9B,MAAM,CAACY,OAAX,EAAoB,cAApB,EAAoC;AAClCC,EAAAA,OAAO,EAAE,CAAC,QAAD,CADyB;AAElCC,EAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,gBAA1B,CAFyB;AAGlCC,EAAAA,MAAM,EAAE;AACNuD,IAAAA,QAAQ,EAAE,CAAC,GAAGtE,MAAM,CAACyB,YAAX,EAAyB,eAAzB,CADJ;AAENuD,IAAAA,SAAS,EAAE,CAAC,GAAGhF,MAAM,CAAC4B,oBAAX,EAAiC,cAAjC,CAFL;AAGNjB,IAAAA,cAAc,EAAE,CAAC,GAAGX,MAAM,CAAC4B,oBAAX,EAAiC,8BAAjC;AAHV;AAH0B,CAApC;AASA,CAAC,GAAG5B,MAAM,CAACY,OAAX,EAAoB,2BAApB,EAAiD;AAC/CC,EAAAA,OAAO,EAAE,CAAC,WAAD,CADsC;AAE/CC,EAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,iBAAP,CAFsC;AAG/CC,EAAAA,MAAM,EAAE;AACNkE,IAAAA,QAAQ,EAAE,CAAC,GAAGjF,MAAM,CAACQ,QAAX,EAAqBJ,IAArB,CADJ;AAENsE,IAAAA,EAAE,EAAE,CAAC,GAAG1E,MAAM,CAACyB,YAAX,EAAyB,YAAzB,CAFE;AAGNyD,IAAAA,eAAe,EAAE,CAAC,GAAGlF,MAAM,CAACyB,YAAX,EAAyB,CAAC,cAAD,EAAiB,2BAAjB,CAAzB;AAHX;AAHuC,CAAjD;AASA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,2BAApB,EAAiD;AAC/CE,EAAAA,OAAO,EAAE,CAAC,YAAD,CADsC;AAE/CC,EAAAA,MAAM,EAAE;AACNyD,IAAAA,UAAU,EAAE,CAAC,GAAGxE,MAAM,CAACyB,YAAX,EAAyB,eAAzB;AADN;AAFuC,CAAjD;AAMA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,qBAApB,EAA2C;AACzCC,EAAAA,OAAO,EAAE,CAAC,YAAD,CADgC;AAEzCC,EAAAA,OAAO,EAAE,CAAC,YAAD,CAFgC;AAGzCC,EAAAA,MAAM,EAAE;AACNyD,IAAAA,UAAU,EAAE,CAAC,GAAGxE,MAAM,CAACyB,YAAX,EAAyB,YAAzB;AADN;AAHiC,CAA3C;AAOA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,oBAApB,EAA0C;AACxCC,EAAAA,OAAO,EAAE,CAAC,WAAD,CAD+B;AAExCC,EAAAA,OAAO,EAAE,CAAC,YAAD,CAF+B;AAGxCC,EAAAA,MAAM,EAAE;AACNyD,IAAAA,UAAU,EAAE,CAAC,GAAGxE,MAAM,CAACyB,YAAX,EAAyB,YAAzB;AADN;AAHgC,CAA1C;AAOA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,8BAApB,EAAoD;AAClDC,EAAAA,OAAO,EAAE,CAAC,WAAD,CADyC;AAElDC,EAAAA,OAAO,EAAE,CAAC,IAAD,CAFyC;AAGlDC,EAAAA,MAAM,EAAE;AACN2D,IAAAA,EAAE,EAAE,CAAC,GAAG1E,MAAM,CAACyB,YAAX,EAAyB,YAAzB;AADE;AAH0C,CAApD;AAOA,CAAC,GAAGzB,MAAM,CAACY,OAAX,EAAoB,kBAApB,EAAwC;AACtCE,EAAAA,OAAO,EAAE,CAAC,gBAAD,CAD6B;AAEtCC,EAAAA,MAAM,EAAE;AACNgB,IAAAA,cAAc,EAAE;AACdvB,MAAAA,QAAQ,EAAE,CAAC,GAAGR,MAAM,CAACS,cAAX,EAA2B,QAA3B;AADI;AADV;AAF8B,CAAxC;AAQA,CAAC,GAAGT,MAAM,CAACY,OAAX,EAAoB,8BAApB,EAAoD;AAClDE,EAAAA,OAAO,EAAE,CAAC,QAAD,CADyC;AAElDC,EAAAA,MAAM,EAAE;AACNoE,IAAAA,MAAM,EAAE;AACN3E,MAAAA,QAAQ,EAAE,CAAC,GAAGR,MAAM,CAACoF,KAAX,EAAkB,CAAC,GAAGpF,MAAM,CAACK,eAAX,EAA4B,OAA5B,CAAlB,EAAwD,CAAC,GAAGL,MAAM,CAACqF,UAAX,EAAuB,CAAC,GAAGrF,MAAM,CAACS,cAAX,EAA2B,QAA3B,CAAvB,CAAxD;AADJ;AADF;AAF0C,CAApD;AAQA,CAAC,GAAGT,MAAM,CAACY,OAAX,EAAoB,4BAApB,EAAkD;AAChDE,EAAAA,OAAO,EAAE,CAAC,QAAD,CADuC;AAEhDC,EAAAA,MAAM,EAAE;AACNoE,IAAAA,MAAM,EAAE;AACN3E,MAAAA,QAAQ,EAAE,CAAC,GAAGR,MAAM,CAACoF,KAAX,EAAkB,CAAC,GAAGpF,MAAM,CAACK,eAAX,EAA4B,OAA5B,CAAlB,EAAwD,CAAC,GAAGL,MAAM,CAACqF,UAAX,EAAuB,CAAC,GAAGrF,MAAM,CAACS,cAAX,EAA2B,iBAA3B,CAAvB,CAAxD;AADJ;AADF;AAFwC,CAAlD;AAQA,CAAC,GAAGT,MAAM,CAACY,OAAX,EAAoB,iBAApB,EAAuC;AACrCiC,EAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,SAAf,EAA0B,MAA1B,CAD4B;AAErC/B,EAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,SAAf,CAF4B;AAGrCC,EAAAA,MAAM,EAAE;AACNuE,IAAAA,IAAI,EAAE;AACJ9E,MAAAA,QAAQ,EAAE,CAAC,GAAGR,MAAM,CAACK,eAAX,EAA4B,QAA5B;AADN,KADA;AAINkF,IAAAA,UAAU,EAAE;AACV/E,MAAAA,QAAQ,EAAE,CAAC,GAAGR,MAAM,CAACS,cAAX,EAA2B,QAA3B,CADA;AAEVC,MAAAA,QAAQ,EAAE;AAFA,KAJN;AAQNE,IAAAA,OAAO,EAAE;AACPJ,MAAAA,QAAQ,EAAE,CAAC,GAAGR,MAAM,CAACS,cAAX,EAA2B,QAA3B,CADH;AAEPC,MAAAA,QAAQ,EAAE;AAFH;AARH;AAH6B,CAAvC","sourcesContent":["\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nvar _core = require(\"./core\");\n\nvar _is = require(\"../validators/is\");\n\nconst bool = (0, _utils.assertValueType)(\"boolean\");\nconst tSFunctionTypeAnnotationCommon = {\n  returnType: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true\n  },\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true\n  }\n};\n(0, _utils.default)(\"TSParameterProperty\", {\n  aliases: [\"LVal\"],\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    parameter: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"AssignmentPattern\")\n    }\n  }\n});\n(0, _utils.default)(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _core.functionDeclarationCommon, tSFunctionTypeAnnotationCommon)\n});\n(0, _utils.default)(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _core.classMethodOrDeclareMethodCommon, tSFunctionTypeAnnotationCommon)\n});\n(0, _utils.default)(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: (0, _utils.validateType)(\"TSEntityName\"),\n    right: (0, _utils.validateType)(\"Identifier\")\n  }\n});\nconst signatureDeclarationCommon = {\n  typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n  parameters: (0, _utils.validateArrayOfType)([\"Identifier\", \"RestElement\"]),\n  typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n};\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon\n};\n(0, _utils.default)(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\n(0, _utils.default)(\"TSConstructSignatureDeclaration\", callConstructSignatureDeclaration);\nconst namedTypeElementCommon = {\n  key: (0, _utils.validateType)(\"Expression\"),\n  computed: (0, _utils.validate)(bool),\n  optional: (0, _utils.validateOptional)(bool)\n};\n(0, _utils.default)(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\", \"initializer\"],\n  fields: Object.assign({}, namedTypeElementCommon, {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  })\n});\n(0, _utils.default)(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: Object.assign({}, signatureDeclarationCommon, namedTypeElementCommon, {\n    kind: {\n      validate: (0, _utils.assertOneOf)(\"method\", \"get\", \"set\")\n    }\n  })\n});\n(0, _utils.default)(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    static: (0, _utils.validateOptional)(bool),\n    parameters: (0, _utils.validateArrayOfType)(\"Identifier\"),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n  }\n});\nconst tsKeywordTypes = [\"TSAnyKeyword\", \"TSBooleanKeyword\", \"TSBigIntKeyword\", \"TSIntrinsicKeyword\", \"TSNeverKeyword\", \"TSNullKeyword\", \"TSNumberKeyword\", \"TSObjectKeyword\", \"TSStringKeyword\", \"TSSymbolKeyword\", \"TSUndefinedKeyword\", \"TSUnknownKeyword\", \"TSVoidKeyword\"];\n\nfor (const type of tsKeywordTypes) {\n  (0, _utils.default)(type, {\n    aliases: [\"TSType\", \"TSBaseType\"],\n    visitor: [],\n    fields: {}\n  });\n}\n\n(0, _utils.default)(\"TSThisType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [],\n  fields: {}\n});\nconst fnOrCtrBase = {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"]\n};\n(0, _utils.default)(\"TSFunctionType\", Object.assign({}, fnOrCtrBase, {\n  fields: signatureDeclarationCommon\n}));\n(0, _utils.default)(\"TSConstructorType\", Object.assign({}, fnOrCtrBase, {\n  fields: Object.assign({}, signatureDeclarationCommon, {\n    abstract: (0, _utils.validateOptional)(bool)\n  })\n}));\n(0, _utils.default)(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: (0, _utils.validateType)([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    asserts: (0, _utils.validateOptional)(bool)\n  }\n});\n(0, _utils.default)(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\"],\n  fields: {\n    exprName: (0, _utils.validateType)([\"TSEntityName\", \"TSImportType\"])\n  }\n});\n(0, _utils.default)(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\n(0, _utils.default)(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: (0, _utils.validateArrayOfType)([\"TSType\", \"TSNamedTupleMember\"])\n  }\n});\n(0, _utils.default)(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSNamedTupleMember\", {\n  visitor: [\"label\", \"elementType\"],\n  builder: [\"label\", \"elementType\", \"optional\"],\n  fields: {\n    label: (0, _utils.validateType)(\"Identifier\"),\n    optional: {\n      validate: bool,\n      default: false\n    },\n    elementType: (0, _utils.validateType)(\"TSType\")\n  }\n});\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: (0, _utils.validateArrayOfType)(\"TSType\")\n  }\n};\n(0, _utils.default)(\"TSUnionType\", unionOrIntersection);\n(0, _utils.default)(\"TSIntersectionType\", unionOrIntersection);\n(0, _utils.default)(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: (0, _utils.validateType)(\"TSType\"),\n    extendsType: (0, _utils.validateType)(\"TSType\"),\n    trueType: (0, _utils.validateType)(\"TSType\"),\n    falseType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\")\n  }\n});\n(0, _utils.default)(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: (0, _utils.validate)((0, _utils.assertValueType)(\"string\")),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: (0, _utils.validateType)(\"TSType\"),\n    indexType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\", \"nameType\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\"),\n    optional: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSType\"),\n    nameType: (0, _utils.validateOptionalType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSLiteralType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: {\n      validate: function () {\n        const unaryExpression = (0, _utils.assertNodeType)(\"NumericLiteral\", \"BigIntLiteral\");\n        const unaryOperator = (0, _utils.assertOneOf)(\"-\");\n        const literal = (0, _utils.assertNodeType)(\"NumericLiteral\", \"StringLiteral\", \"BooleanLiteral\", \"BigIntLiteral\");\n\n        function validator(parent, key, node) {\n          if ((0, _is.default)(\"UnaryExpression\", node)) {\n            unaryOperator(node, \"operator\", node.operator);\n            unaryExpression(node, \"argument\", node.argument);\n          } else {\n            literal(parent, key, node);\n          }\n        }\n\n        validator.oneOfNodeTypes = [\"NumericLiteral\", \"StringLiteral\", \"BooleanLiteral\", \"BigIntLiteral\", \"UnaryExpression\"];\n        return validator;\n      }()\n    }\n  }\n});\n(0, _utils.default)(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSInterfaceDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\"TSExpressionWithTypeArguments\")),\n    body: (0, _utils.validateType)(\"TSInterfaceBody\")\n  }\n});\n(0, _utils.default)(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\n(0, _utils.default)(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSAsExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTypeAssertion\", {\n  aliases: [\"Expression\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\"),\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSEnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    const: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    members: (0, _utils.validateArrayOfType)(\"TSEnumMember\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    global: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    body: (0, _utils.validateType)([\"TSModuleBlock\", \"TSModuleDeclaration\"])\n  }\n});\n(0, _utils.default)(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"Statement\")\n  }\n});\n(0, _utils.default)(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: (0, _utils.validateType)(\"StringLiteral\"),\n    qualifier: (0, _utils.validateOptionalType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: (0, _utils.validate)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    moduleReference: (0, _utils.validateType)([\"TSEntityName\", \"TSExternalModuleReference\"])\n  }\n});\n(0, _utils.default)(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"StringLiteral\")\n  }\n});\n(0, _utils.default)(\"TSNonNullExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\")\n  }\n});\n(0, _utils.default)(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TSType\")\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSType\")))\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSTypeParameter\")))\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    },\n    constraint: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    },\n    default: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    }\n  }\n});"]},"metadata":{},"sourceType":"script"}