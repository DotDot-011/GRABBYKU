{"ast":null,"code":"var _jsxFileName = \"F:\\\\tryReact\\\\driver\\\\src\\\\App.js\";\nimport React from \"react\";\nimport './App.css';\nimport { InfoWindow, withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport { throwStatement } from \"@babel/types\";\nimport { Descriptions } from 'antd';\nimport AutoComplete from 'react-google-autocomplete';\nimport Axios from 'axios';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(\"AIzaSyDrjHmzaE-oExXPRlnkij2Ko3svtUwy9p4\");\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      zoom: 15,\n      height: 400,\n      mapPosition: {\n        lat: 13.84839475068859,\n        lng: 100.56908802639256\n      },\n      markerPosition: {\n        lat: 13.84839475068859,\n        lng: 100.56908802639256\n      },\n      locationList: []\n    };\n\n    this.findMylocation = () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          mapPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n          markerPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        }, () => {\n          Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(response => {\n            const address = response.results[0].formatted_address,\n                  addressArray = response.results[0].address_components,\n                  city = this.getCity(addressArray),\n                  area = this.getArea(addressArray),\n                  state = this.getState(addressArray);\n            this.setState({\n              adress: address ? address : \"\",\n              area: area ? area : \"\",\n              city: city ? city : \"\",\n              state: state ? state : \"\"\n            });\n          });\n        });\n      });\n    };\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let index = 0; index < addressArray.length; index++) {\n        if (addressArray[index].types[0] && 'administrative_area_level_2' === addressArray[index].types[0]) {\n          city = addressArray[index].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onMarkerDragEnd = event => {\n      let newLat = event.latLng.lat();\n      let newLng = event.latLng.lng();\n      console.log('newLat', newLat);\n      console.log('newLng', newLng);\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        console.log(response);\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\",\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      });\n    };\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            newLat = place.geometry.location.lat(),\n            newLng = place.geometry.location.lng();\n      this.setState({\n        adress: address ? address : \"\",\n        area: area ? area : \"\",\n        city: city ? city : \"\",\n        state: state ? state : \"\",\n        markerPosition: {\n          lat: newLat,\n          lng: newLng\n        },\n        mapPosition: {\n          lat: newLat,\n          lng: newLng\n        }\n      });\n    };\n\n    this.getLocation = () => {\n      Axios.get('http://localhost:3001/location').then(response => {\n        this.setState(state => {\n          this.state.locationList = response.data;\n        });\n        this.setState({\n          markerPosition: {\n            lat: this.state.locationList[this.state.locationList.length - 1].Latitude,\n            lng: this.state.locationList[this.state.locationList.length - 1].Longtitude\n          }\n        });\n        console.log(this.state.locationList[this.state.locationList.length - 1].Latitude);\n        console.log(this.state.markerPosition.lat);\n      });\n    };\n  }\n\n  // userLocation = this.state.locationList.map((val,key) => {\n  //   return (\n  //     <div className=\"location-card\">\n  //       <div className=\"card-body test-left\">\n  //         <p className=\"card-text\">Lat: {val.Latitude}</p>\n  //         <p className=\"card-text\">Lng: {val.Longtitude}</p>\n  //         <button className=\"button-show-location\">Show location</button>\n  //       </div>\n  //     </div>\n  //   );\n  // })\n  render() {\n    const MapWithAMarker = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n      defaultZoom: 15,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      } // defaultCenter={{ lat:13.84839475068859, lng: 100.56908802639256 }}\n      ,\n      defaultOptions: {\n        zoomControl: true,\n        scrollwheel: true,\n        streetViewControl: false,\n        draggable: true,\n        minZoom: 15,\n        maxZoom: 16,\n        mapTypeControl: false\n      },\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        draggable: true,\n        onDragEnd: this.onMarkerDragEnd,\n        position: {\n          lat: this.state.markerPosition.lat,\n          lng: this.state.markerPosition.lng\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-load-location\",\n        onClick: this.getLocation,\n        children: \"location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), this.userLocation]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '1rem',\n        margin: '0 auto',\n        maxWidth: 600\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ku Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Descriptions, {\n        bordered: true,\n        children: /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n          label: \"Address\",\n          children: this.state.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapWithAMarker, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDrjHmzaE-oExXPRlnkij2Ko3svtUwy9p4&v=3.exp&libraries=geometry,drawing,places\",\n        loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 27\n        }, this),\n        containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `400px`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 29\n        }, this),\n        mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["F:/tryReact/driver/src/App.js"],"names":["React","InfoWindow","withScriptjs","withGoogleMap","GoogleMap","Marker","Geocode","throwStatement","Descriptions","AutoComplete","Axios","useState","setApiKey","App","Component","state","address","city","area","zoom","height","mapPosition","lat","lng","markerPosition","locationList","findMylocation","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","fromLatLng","then","response","results","formatted_address","addressArray","address_components","getCity","getArea","getState","adress","index","length","types","long_name","i","j","onMarkerDragEnd","event","newLat","latLng","newLng","console","log","onPlaceSelected","place","geometry","location","getLocation","get","data","Latitude","Longtitude","render","MapWithAMarker","props","zoomControl","scrollwheel","streetViewControl","draggable","minZoom","maxZoom","mapTypeControl","userLocation","padding","margin","maxWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './App.css'\nimport {\n  InfoWindow,\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} from \"react-google-maps\";\n\nimport Geocode from \"react-geocode\";\nimport { throwStatement } from \"@babel/types\";\nimport { Descriptions } from 'antd';\nimport AutoComplete from 'react-google-autocomplete'\nimport Axios from 'axios'\nimport { useState } from 'react'\nGeocode.setApiKey(\"AIzaSyDrjHmzaE-oExXPRlnkij2Ko3svtUwy9p4\");\n\n\nclass App extends React.Component {\n\n  state = {\n    address: '',\n    city: '',\n    area: '',\n    state: '',\n    zoom: 15,\n    height: 400,\n    mapPosition: {\n      lat: 13.84839475068859,\n      lng: 100.56908802639256,\n    },\n    markerPosition: {\n      lat: 13.84839475068859,\n      lng: 100.56908802639256,\n    },\n    locationList:[]\n  }\n\n  findMylocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      this.setState({\n        mapPosition: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        },\n        markerPosition: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      }, () => {\n        Geocode.fromLatLng(position.coords.latitude, position.coords.longitude)\n          .then(response => {\n            const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n            this.setState({\n              adress: (address) ? address : \"\",\n              area: (area) ? area : \"\",\n              city: (city) ? city : \"\",\n              state: (state) ? state : \"\",\n            })\n          })\n      })\n    })\n  }\n  getCity = (addressArray) => {\n    let city = '';\n    for (let index = 0; index < addressArray.length; index++) {\n      if (addressArray[index].types[0] && 'administrative_area_level_2' === addressArray[index].types[0]) {\n        city = addressArray[index].long_name;\n        return city;\n      }\n    }\n  }\n  getArea = (addressArray) => {\n    let area = '';\n    for (let i = 0; i < addressArray.length; i++) {\n      if (addressArray[i].types[0]) {\n        for (let j = 0; j < addressArray[i].types.length; j++) {\n          if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n            area = addressArray[i].long_name;\n            return area;\n          }\n        }\n      }\n    }\n  };\n\n  getState = (addressArray) => {\n    let state = '';\n    for (let i = 0; i < addressArray.length; i++) {\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n          state = addressArray[i].long_name;\n          return state;\n        }\n      }\n    }\n  };\n\n  onMarkerDragEnd = (event) => {\n\n    let newLat = event.latLng.lat();\n    let newLng = event.latLng.lng();\n    console.log('newLat', newLat);\n    console.log('newLng', newLng);\n    Geocode.fromLatLng(newLat, newLng)\n      .then(response => {\n        console.log(response)\n        const address = response.results[0].formatted_address,\n          addressArray = response.results[0].address_components,\n          city = this.getCity(addressArray),\n          area = this.getArea(addressArray),\n          state = this.getState(addressArray);\n        this.setState({\n          address: (address) ? address : \"\",\n          area: (area) ? area : \"\",\n          city: (city) ? city : \"\",\n          state: (state) ? state : \"\",\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n        })\n      })\n\n  }\n\n  onPlaceSelected = (place) => {\n    const address = place.formatted_address,\n      addressArray = place.address_components,\n      city = this.getCity(addressArray),\n      area = this.getArea(addressArray),\n      state = this.getState(addressArray),\n      newLat = place.geometry.location.lat(),\n      newLng = place.geometry.location.lng();\n    this.setState({\n      adress: (address) ? address : \"\",\n      area: (area) ? area : \"\",\n      city: (city) ? city : \"\",\n      state: (state) ? state : \"\",\n      markerPosition: {\n        lat: newLat,\n        lng: newLng\n      },\n      mapPosition: {\n        lat: newLat,\n        lng: newLng\n      },\n    })\n  }\n\n  \n  getLocation = () => {\n    Axios.get('http://localhost:3001/location').then((response) => {\n      this.setState(state=>{\n          this.state.locationList = response.data;\n          \n      })\n      this.setState({\n        markerPosition: {\n          lat: this.state.locationList[this.state.locationList.length-1].Latitude,\n          lng: this.state.locationList[this.state.locationList.length-1].Longtitude\n        },\n      })\n      console.log(this.state.locationList[this.state.locationList.length-1].Latitude)\n      console.log(this.state.markerPosition.lat)\n    });\n    \n\n  }\n  \n  // userLocation = this.state.locationList.map((val,key) => {\n  //   return (\n  //     <div className=\"location-card\">\n  //       <div className=\"card-body test-left\">\n  //         <p className=\"card-text\">Lat: {val.Latitude}</p>\n  //         <p className=\"card-text\">Lng: {val.Longtitude}</p>\n  //         <button className=\"button-show-location\">Show location</button>\n  //       </div>\n  //     </div>\n  //   );\n  // })\n\n\n\n  render() {\n    const MapWithAMarker = withScriptjs(withGoogleMap(props =>\n      <GoogleMap\n\n        defaultZoom={15}\n        defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n        // defaultCenter={{ lat:13.84839475068859, lng: 100.56908802639256 }}\n        defaultOptions={{\n          zoomControl: true,\n          scrollwheel: true,\n          streetViewControl: false,\n          draggable: true,\n          minZoom: 15,\n          maxZoom: 16,\n          mapTypeControl: false,\n        }}\n      >\n\n        <Marker\n          draggable={true}\n          onDragEnd={this.onMarkerDragEnd}\n          position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\n\n        >\n        </Marker>\n\n        <button className=\"button-load-location\" onClick={this.getLocation}>location</button>\n        {this.userLocation}\n        \n\n\n        \n      </GoogleMap>\n    ));\n    return (\n\n      <div style={{ padding: '1rem', margin: '0 auto', maxWidth: 600 }}>\n        <h1>Ku Map</h1>\n\n        <Descriptions bordered>\n          {/* <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\n        <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\n        <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item> */}\n          <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\n        </Descriptions>\n        <MapWithAMarker\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDrjHmzaE-oExXPRlnkij2Ko3svtUwy9p4&v=3.exp&libraries=geometry,drawing,places\"\n          loadingElement={<div style={{ height: `100%` }} />}\n          containerElement={<div style={{ height: `400px` }} />}\n          mapElement={<div style={{ height: `100%` }} />}\n\n        />\n        \n      </div>\n\n\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}